

-- BODY FOR USER PACKAGE


CREATE OR REPLACE PACKAGE BODY USER_PKG_FUNCS IS

   -- AVERAGE RATING
    FUNCTION AVG_RATE(BIKE IN INTEGER) RETURN DECIMAL IS
        CURSOR RATE_CURS IS SELECT RATING_VALUE FROM RATINGS WHERE BIKE_ID = BIKE;
        RATE RATINGS%ROWTYPE;
        CNT NUMBER := 0;
        SUM_RATE NUMBER := 0;
        AVG_RATE DECIMAL;
    BEGIN
        FOR RATE IN RATE_CURS LOOP
            SUM_RATE := SUM_RATE + RATE.RATING_VALUE;
            CNT := CNT + 1;
        END LOOP;
        IF CNT > 0 THEN
            AVG_RATE := SUM_RATE / CNT;
        ELSE 
            AVG_RATE := 0;
        END IF;
        RETURN AVG_RATE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 0; 
        WHEN TOO_MANY_ROWS THEN
            RETURN 0;
        WHEN OTHERS THEN 
            RETURN 0;
    END AVG_RATE;

    -- ENCRYPT PASS
    FUNCTION HASH_PASS(PASSWORD IN NVARCHAR2) RETURN NVARCHAR2 IS
    BEGIN
        IF PASSWORD IS NULL OR LENGTH(PASSWORD) > 20  THEN 
            RETURN 'FALSE'; 
        ELSE
            RETURN DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(PASSWORD,'AL32UTF8'),DBMS_CRYPTO.HASH_SH256);    
        END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'FALSE'; 
        WHEN TOO_MANY_ROWS THEN
            RETURN 'FALSE';
        WHEN OTHERS THEN 
            RETURN 'FALSE';
    END HASH_PASS;

    -- REGISTER
    FUNCTION REGISTER(
        NAME IN NVARCHAR2,
        SURNAME IN NVARCHAR2,
        FATHERNAME IN NVARCHAR2,
        EMAIL IN NVARCHAR2,
        PASSWORD IN NVARCHAR2,
        BIRTH IN DATE,
        USER_ADRESS IN NVARCHAR2,
        ROLE IN INTEGER) RETURN INTEGER IS
        ID INTEGER;
    BEGIN
        INSERT INTO USERS(USER_NAME,USER_SURNAME,USER_FATHERNAME,USER_EMAIL,PASSWORD,DATE_OF_BIRTH,ADRESS,ROLE_ID)
        VALUES (NAME , SURNAME ,FATHERNAME,EMAIL,HASH_PASS(PASSWORD),BIRTH,USER_ADRESS,ROLE)
        RETURNING USERS.USER_ID INTO ID;
        RETURN ID;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END REGISTER;
    
    -- LOGIN
    FUNCTION LOGIN(
        EMAIL IN NVARCHAR2,
        PASS IN NVARCHAR2) RETURN INTEGER IS
        USER USERS%ROWTYPE;
    BEGIN
        SELECT * INTO USER FROM USERS  WHERE PASSWORD = HASH_PASS(PASS) AND USER_EMAIL = EMAIL;
        IF PASS IS NULL THEN 
            RETURN 0;
        ELSIF USER.USER_ID IS NOT NULL THEN
            RETURN USER.USER_ID;
        ELSE 
            RETURN 0;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END LOGIN;

    -- ADD BIKE
    FUNCTION ADD_BIKE(
        SELLER IN INTEGER,
        NAME IN NVARCHAR2,
        PRICE IN DECIMAL,
        CATEGORY IN INTEGER) RETURN INTEGER IS
        ID BIKES.BIKE_ID%TYPE;
    BEGIN
        INSERT INTO BIKES(SELLER_ID,BIKE_NAME,PRICE,CATEGORY_ID) VALUES(SELLER,NAME , PRICE , CATEGORY )
        RETURNING BIKES.BIKE_ID INTO ID;
        RETURN ID;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END ADD_BIKE;

    -- ADD DESCRIPTION
    FUNCTION ADD_DESC(
        BIKE IN INTEGER ,
        DESCR IN NVARCHAR2,
        TYPE IN NVARCHAR2,
        MAT IN NVARCHAR2,
        W IN FLOAT,
        H IN FLOAT) RETURN INTEGER IS
        ID DESCRIPTIONS.DESC_ID%TYPE;
    BEGIN
        INSERT INTO DESCRIPTIONS(BIKE_ID,BIKE_DESC,BIKE_TYPE,MATERIAL,WEIGHT,HEIGHT) VALUES(BIKE,DESCR,TYPE,MAT,W,H)
        RETURNING DESCRIPTIONS.DESC_ID INTO ID;
        RETURN ID;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END ADD_DESC;

    -- ADD CATEGORY
    FUNCTION ADD_CATEGORY(
        NAME IN VARCHAR2) RETURN NUMBER IS
        ID CATEGORIES.CATEGORY_ID%TYPE;
    BEGIN
        IF NAME IS NOT NULL THEN
            INSERT INTO CATEGORIES(CAT_NAME)VALUES(NAME)
            RETURNING CATEGORIES.CATEGORY_ID INTO ID;
            RETURN ID;
        ELSE
            RETURN 0;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END ADD_CATEGORY;

    -- ADD ROLE
    FUNCTION ADD_ROLE(
        NAME IN NVARCHAR2) RETURN INTEGER IS
        ID ROLES.ROLE_ID%TYPE;
    BEGIN
        IF NAME IS NOT NULL THEN 
            INSERT INTO ROLES(ROLENAME) VALUES (NAME) 
            RETURNING ROLES.ROLE_ID INTO ID;
            RETURN ID;
        ELSE
            RETURN 0;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END ADD_ROLE;

    -- ADD ORDER
    FUNCTION ADD_ORDER(
        BUYER IN INTEGER,
        ODATE IN DATE,
        STAT IN NVARCHAR2) RETURN INTEGER IS
        CURSOR CART_CURS IS SELECT BIKE_ID , QUANTITY FROM CART WHERE USER_ID = BUYER;
        ID ORDERS.ORDER_ID%TYPE;
        CART_REC CART%ROWTYPE;
    BEGIN
        FOR CART_REC IN CART_CURS LOOP
            INSERT INTO ORDERS(BUYER_ID,BIKE_ID,QUANTITY,ORDER_DATE,STATUS) VALUES(BUYER,CART_REC.BIKE_ID,CART_REC.QUANTITY,ODATE,STAT)
            RETURNING ORDERS.ORDER_ID INTO ID;
        END LOOP;
        CLEAR_CART(BUYER);
        RETURN ID;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END ADD_ORDER;

    -- UPDATE USER
    FUNCTION UPDATE_USER(
        UID IN INTEGER ,
        NAME IN NVARCHAR2,
        SURNAME IN NVARCHAR2,
        FATHERNAME IN NVARCHAR2,
        EMAIL IN NVARCHAR2,
        PASS IN NVARCHAR2,
        BIRTH IN DATE,
        ADR IN NVARCHAR2,
        ROLE IN INTEGER) RETURN INTEGER IS
        ID USERS.USER_ID%TYPE;
    BEGIN
        UPDATE USERS 
        SET USER_NAME = NAME ,
         USER_SURNAME = SURNAME, 
         USER_FATHERNAME = FATHERNAME ,
         USER_EMAIL = EMAIL ,
         PASSWORD = HASH_PASS(PASS) ,
         DATE_OF_BIRTH = BIRTH, 
         ADRESS = ADR ,
         ROLE_ID = ROLE  
        WHERE USER_ID = UID
        RETURNING USERS.USER_ID INTO ID;
        RETURN ID;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END UPDATE_USER;

    -- ADD RATE
    FUNCTION ADD_RATE(
        BIKE IN INTEGER ,
        USER IN INTEGER ,
        VALUE IN NUMBER ,
        MESSAGE IN NVARCHAR2 ,
        TIMES IN TIMESTAMP) RETURN INTEGER IS
        ID RATINGS.RATING_ID%TYPE;
    BEGIN
        IF VALUE > 10 OR VALUE < 0 THEN 
            RETURN 0;
        ELSE
            INSERT INTO RATINGS(BIKE_ID,USER_ID,RATING_VALUE,RATING_MESSAGE,TIME_STAMP) VALUES(BIKE,USER,VALUE,MESSAGE,TIMES)
            RETURNING RATINGS.RATING_ID INTO ID;
            RETURN ID;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN 
            RETURN 0;
    END ADD_RATE;


END USER_PKG_FUNCS;

--  PROCEDURES

CREATE OR REPLACE PACKAGE BODY USER_PKG_PROC AS


-- ADD BIKE TO CART 

 PROCEDURE ADD_TO_CART
    (
    USER INTEGER ,
    BIKE INTEGER ,
    QNT NUMBER
    )
    IS
        ID CART.CART_ID%TYPE;
    BEGIN
        INSERT INTO CART(USER_ID,BIKE_ID,QUANTITY)VALUES(USER,BIKE,QNT)
        RETURNING CART.CART_ID INTO ID;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;





-- DEL BIKE FROM CART

 PROCEDURE DEL_FROM_CART
    (
    USER IN INTEGER ,
    BIKE IN INTEGER 
    )
    IS
        ID CART.CART_ID%TYPE;
    BEGIN
        DELETE FROM CART WHERE USER_ID = USER AND BIKE_ID = BIKE
        RETURNING CART.CART_ID INTO ID;
        EXCEPTION
        WHEN OTHERS
            THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    




-- UPDATE PASSWORD

 PROCEDURE UPDATE_PASS
    (
    USER IN INTEGER,
    EMAIL IN NVARCHAR2,
    PASS IN NVARCHAR2
    )
    IS
        ID USERS.USER_ID%TYPE;
    BEGIN
        UPDATE USERS SET PASSWORD = HASH_PASS(PASS) WHERE USERS.USER_ID = USER AND USER_EMAIL = EMAIL
        RETURNING USERS.USER_ID INTO ID
        ;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



-- UPDATE BIKE 

 PROCEDURE UPDATE_BIKE 
    (
    BIKE IN INTEGER,
    NAME IN NVARCHAR2,
    COST IN DECIMAL,
    CAT IN INTEGER
    )
    IS
    ID BIKES.BIKE_ID%TYPE;
    BEGIN
    UPDATE BIKES SET BIKE_NAME = NAME,PRICE=COST,CATEGORY_ID = CAT WHERE BIKE_ID = BIKE
    RETURNING BIKES.BIKE_ID INTO ID;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM); 
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



-- DELETE USER
 PROCEDURE DEL_USER
(
    USER_ID IN INTEGER
)
IS
BEGIN
    DELETE FROM ORDERS WHERE BUYER_ID = USER_ID;
    DELETE FROM CART WHERE USER_ID = USER_ID;
    DELETE FROM DESCRIPTIONS WHERE BIKE_ID IN (SELECT BIKE_ID FROM BIKES WHERE SELLER_ID = USER_ID);
    DELETE FROM RATINGS WHERE USER_ID = USER_ID;
    DELETE FROM BIKES WHERE SELLER_ID = USER_ID;
    DELETE FROM USERS WHERE USER_ID = USER_ID;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


-- DELETE BIKE

 PROCEDURE DEL_BIKE 
    (
    BIKE IN INTEGER
    )
    IS
        BID BIKES.BIKE_ID%TYPE; 
    BEGIN
        DELETE FROM ORDERS WHERE BIKE_ID = BIKE;
        DELETE FROM CART WHERE BIKE_ID = BIKE;
        DELETE FROM RATINGS WHERE BIKE_ID = BIKE;
        DELETE FROM DESCRIPTIONS WHERE BIKE_ID = BIKE;
        DELETE FROM BIKES WHERE BIKE_ID = BIKE
        RETURNING BIKES.BIKE_ID INTO BID;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    
-- CLEAR CART 

 PROCEDURE CLEAR_CART
    (
      USER INTEGER 
    )
    IS
        CURSOR CART_CURS IS SELECT CART_ID ,USER_ID, BIKE_ID , QUANTITY FROM CART;
        CT CART%ROWTYPE;
    BEGIN
        FOR CT IN CART_CURS
        LOOP
            DELETE FROM CART WHERE CART.CART_ID = CT.CART_ID AND CART.USER_ID = USER AND CART.BIKE_ID =  CT.BIKE_ID AND CART.QUANTITY = CT.QUANTITY;
        END LOOP;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;


-- CLEAR ORDER

 PROCEDURE CLEAR_ORDER
(
    USER IN INTEGER
)
IS
BEGIN
IF USER IS NOT NULL THEN
    DELETE FROM ORDERS WHERE BUYER_ID = USER ;
ELSE
    RAISE NO_DATA_FOUND;
END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;



-- UPDATE ORDER

 PROCEDURE UPDATE_ORDER
    (
    ORD IN INTEGER,
    BUYER IN INTEGER  ,
    BIKE IN INTEGER  ,
    QNT IN NUMBER  ,
    ODATE IN DATE  ,
    STAT IN NVARCHAR2  
    )
    IS
        ID ORDERS.ORDER_ID%TYPE;
    BEGIN
        UPDATE ORDERS SET 
        BUYER_ID = BUYER,
        BIKE_ID = BIKE,
        QUANTITY = QNT,
        ORDER_DATE = ODATE,
        STATUS = STAT 
        WHERE ORDER_ID = ORD
        RETURNING ORDERS.ORDER_ID INTO ID;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;



-- DEL ORDER

 PROCEDURE DEL_ORDER 
    (
    ORD IN INTEGER
    )
    IS
        OID ORDERS.ORDER_ID%TYPE; 
    BEGIN
        DELETE FROM ORDERS WHERE ORDER_ID = ORD
        RETURNING ORDERS.ORDER_ID INTO OID;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;


-- DEL ROLE
 PROCEDURE DEL_ROLE
(
RID IN INTEGER
)
IS
    ID ROLES.ROLE_ID%TYPE;
BEGIN
         DELETE FROM ROLES WHERE ROLE_ID = RID
         RETURNING ROLES.ROLE_ID INTO ID
         ;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;



-- UPD ROLE

 PROCEDURE UPD_ROLE
(
RID IN INTEGER,
RNAME IN NVARCHAR2
)
IS
    ID ROLES.ROLE_ID%TYPE;
BEGIN
   IF RID IS NOT NULL THEN
        UPDATE ROLES SET ROLENAME = RNAME WHERE ROLE_ID = RID
        RETURNING ROLES.ROLE_ID INTO ID;
   ELSE
       RAISE NO_DATA_FOUND; 
   END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


-- DEL CATEGORY

 PROCEDURE DEL_CATEGORY
(
CID IN INTEGER
)
IS
    BID BIKES.BIKE_ID%TYPE;
BEGIN
    IF CID IS NOT NULL THEN
        FOR order_rec IN (SELECT BIKE_ID FROM BIKES WHERE CATEGORY_ID = CID) LOOP
            DELETE FROM ORDERS WHERE BIKE_ID = order_rec.BIKE_ID;
        END LOOP;
        FOR cart_rec IN (SELECT BIKE_ID FROM BIKES WHERE CATEGORY_ID = CID) LOOP
            DELETE FROM CART WHERE BIKE_ID = cart_rec.BIKE_ID;
        END LOOP;
        FOR desc_rec IN (SELECT BIKE_ID FROM BIKES WHERE CATEGORY_ID = CID) LOOP
            DELETE FROM DESCRIPTIONS WHERE BIKE_ID = desc_rec.BIKE_ID;
        END LOOP;
        FOR rating_rec IN (SELECT BIKE_ID FROM BIKES WHERE CATEGORY_ID = CID) LOOP
            DELETE FROM RATINGS WHERE BIKE_ID = rating_rec.BIKE_ID;
        END LOOP;
        DELETE FROM BIKES WHERE CATEGORY_ID = CID RETURNING BIKE_ID INTO BID;
        DELETE FROM CATEGORIES WHERE CATEGORY_ID = CID;
    ELSE
        RAISE NO_DATA_FOUND;
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


-- UPD CATEGORY

 PROCEDURE UPD_CATEGORY
(
CID IN INTEGER,
CNAME IN NVARCHAR2
)
IS
BEGIN
    IF CID IS NOT NULL AND CNAME IS NOT NULL THEN
        UPDATE CATEGORIES SET CAT_NAME = CNAME WHERE CATEGORY_ID = CID;
    ELSE
        RAISE NO_DATA_FOUND;
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


-- DEL DESCRIPTION
 PROCEDURE DEL_DESC
(
BID IN INTEGER
)
IS
BEGIN
    IF BID IS NOT NULL THEN
        DELETE FROM DESCRIPTIONS WHERE BIKE_ID = BID;
    ELSE 
        RAISE NO_DATA_FOUND;
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


-- UPD DESCRIPTION

 PROCEDURE UPD_DESC
(
DID IN INTEGER,
BIKE IN INTEGER,
DESCR IN NVARCHAR2,
TYPE IN NVARCHAR2,
MAT IN NVARCHAR2,
W IN FLOAT,
H IN FLOAT
)
IS
BEGIN
    IF DID IS NOT NULL AND BIKE IS NOT NULL THEN
        UPDATE DESCRIPTIONS SET BIKE_DESC = DESCR , BIKE_TYPE = TYPE , MATERIAL = MAT , WEIGHT = W , HEIGHT = H;
    ELSE 
        RAISE NO_DATA_FOUND;
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;

-- DEL RATE
PROCEDURE DEL_RATE
(
BIKE IN INTEGER
)
IS
BEGIN
    IF BIKE IS NOT NULL THEN
        DELETE FROM RATINGS WHERE BIKE_ID = BIKE;
    ELSE
        RAISE NO_DATA_FOUND;
    END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;

-- UPD RATE

 PROCEDURE UPD_RATE
(
BIKE IN INTEGER,
USER IN INTEGER,
VALUE IN NUMBER,
MSG IN NVARCHAR2,
STAMP IN TIMESTAMP
)
IS
BEGIN
IF BIKE IS NOT NULL AND USER IS NOT NULL THEN
    UPDATE RATINGS SET RATING_VALUE = VALUE , RATING_MESSAGE = MSG ,TIME_STAMP = STAMP WHERE BIKE_ID = BIKE AND USER_ID = USER;
ELSE
    RAISE NO_DATA_FOUND;
END IF;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN TOO_MANY_ROWS THEN
        raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
        WHEN OTHERS 
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END;


END USER_PKG_PROC;