ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

---  --------------------- TABLESPACES FOR TABLES: ---------------------
-- USERS
CREATE TABLESPACE TS_USER
    DATAFILE 'C:\Tablecpaces\CourseWork\TS_USER.dbf'
    size 50M
    autoextend on next 5M
    extent management local;

-- ORDERS

CREATE TABLESPACE TS_ORDER
    DATAFILE 'C:\Tablecpaces\CourseWork\TS_ORDER.dbf'
    size 50M
    autoextend on next 5M
    extent management local;

-- CART

CREATE TABLESPACE TS_CART
    DATAFILE 'C:\Tablecpaces\CourseWork\TS_CART.dbf'
    size 50M
    autoextend on next 5M
    extent management local;

CREATE TABLESPACE TS_BIKE 
    DATAFILE 'C:\Tablecpaces\CourseWork\TS_BIKE.dbf'
    SIZE 50M
    AUTOEXTEND ON NEXT 5M
    EXTENT MANAGEMENT LOCAL;
    
    
    ALTER USER DEVELOPER QUOTA UNLIMITED ON  TS_USER;
    ALTER USER DEVELOPER QUOTA UNLIMITED ON  TS_BIKE;
    ALTER USER DEVELOPER QUOTA UNLIMITED ON  TS_ORDER;
    ALTER USER DEVELOPER QUOTA UNLIMITED ON  TS_CART;
    
 -- DROP TABLESPACE TS_BIKE
 -- DROP TABLESPACE TS_USER  
 -- DROP TABLESPACE TS_ORDER
 -- DROP TABLESPACE TS_CART
--      -----------------       TABLES           ---------------


CREATE TABLE ROLES (
ROLE_ID INTEGER  GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
ROLENAME NVARCHAR2(255)
) TABLESPACE TS_USER;


CREATE TABLE USERS (
USER_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
USER_NAME NVARCHAR2(255) NOT NULL,
USER_SURNAME NVARCHAR2(255) NOT NULL,
USER_FATHERNAME NVARCHAR2(255),
USER_EMAIL NVARCHAR2(255) NOT NULL,
PASSWORD NVARCHAR2(255) NOT NULL,
DATE_OF_BIRTH DATE,
ADRESS NVARCHAR2(255) NOT NULL,
ROLE_ID INTEGER NOT NULL,
CONSTRAINT FK_USER_ROLE FOREIGN KEY(ROLE_ID) REFERENCES ROLES(ROLE_ID) 
) TABLESPACE TS_USER;

CREATE TABLE CATEGORIES(
CATEGORY_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
CAT_NAME VARCHAR2(255) NOT NULL,
CONSTRAINT CHECK_CAT CHECK(CAT_NAME = 'MTB' OR CAT_NAME = 'BMX' OR CAT_NAME = 'MOUNTAINT' OR CAT_NAME='KID' OR CAT_NAME = 'DEFAULT')
) TABLESPACE TS_BIKE;

CREATE TABLE BIKES(
BIKE_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
SELLER_ID INTEGER NOT NULL,
BIKE_NAME NVARCHAR2(255) NOT NULL,
PRICE DECIMAL(10,2) NOT NULL,
CATEGORY_ID INTEGER NOT NULL,
CONSTRAINT FK_BIKE_SELLER FOREIGN KEY(SELLER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_BIKE_CATEGORY FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID)
) TABLESPACE TS_BIKE;


CREATE TABLE DESCRIPTIONS(
DESC_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
BIKE_ID INTEGER NOT NULL,
BIKE_DESC NVARCHAR2(2000) NOT NULL,
BIKE_TYPE NVARCHAR2(100),
MATERIAL NVARCHAR2(50),
WEIGHT FLOAT(5),
HEIGHT FLOAT(5),
CONSTRAINT FK_DESC_BIKE FOREIGN KEY(BIKE_ID) REFERENCES BIKES(BIKE_ID)
) TABLESPACE TS_BIKE;

CREATE TABLE RATINGS(
RATING_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
BIKE_ID INTEGER NOT NULL,
USER_ID INTEGER NOT NULL,
RATING_VALUE NUMBER(1,0) NOT NULL ,
RATING_MESSAGE NVARCHAR2(100) NOT NULL,
TIME_STAMP TIMESTAMP NOT NULL,
CONSTRAINT FK_RATE_BIKE FOREIGN KEY(BIKE_ID) REFERENCES BIKES(BIKE_ID),
CONSTRAINT FK_RATE_USER FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID)
) TABLESPACE TS_BIKE;

CREATE TABLE CART(
CART_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
USER_ID INTEGER NOT NULL,
BIKE_ID INTEGER NOT NULL,
QUANTITY NUMBER(6) NOT NULL,
CONSTRAINT FK_CART_USER FOREIGN KEY(USER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT FK_CART_BIKE FOREIGN KEY(BIKE_ID) REFERENCES BIKES(BIKE_ID)
) TABLESPACE TS_CART;

CREATE TABLE ORDERS (
ORDER_ID INTEGER GENERATED ALWAYS AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY,
BUYER_ID INTEGER NOT NULL,
BIKE_ID INTEGER NOT NULL,
QUANTITY NUMBER(6) NOT NULL,
ORDER_DATE DATE NOT NULL,
STATUS NVARCHAR2(40) NOT NULL,
CONSTRAINT FK_ORDER_BIKE FOREIGN KEY(BIKE_ID) REFERENCES BIKES(BIKE_ID),
CONSTRAINT FK_ORDER_BUYER FOREIGN KEY(BUYER_ID) REFERENCES USERS(USER_ID),
CONSTRAINT STATUS_CHECK CHECK(STATUS = 'IN WAY' OR STATUS = 'ARRIVED' OR STATUS = 'COMPLETED' OR STATUS = 'IN ASSEMBLY')
) TABLESPACE TS_ORDER;

--DROP TABLE ROLES; 8
--DROP TABLE USERS; 7
--DROP TABLE BIKES; 5
--DROP TABLE CATEGORIES; 6
--DROP TABLE DESCRIPTIONS; 4
--DROP TABLE RATINGS; 3
--DROP TABLE CART; 2
--DROP TABLE ORDERS; 1



-- -------------------------- USERS_ROLES ----------------------------------

CREATE ROLE USER_ROLE;

GRANT 
CONNECT,
CREATE SESSION
TO USER_ROLE;

CREATE ROLE MANAGER_ROLE;

-- DROP ROLE USER_ROLE;
-- DROP ROLE MANAGER_ROLE
-- -------------------------- USERS_CREATES ----------------------------------
CREATE USER USER_1 IDENTIFIED BY 123;
CREATE USER MANAGER IDENTIFIED BY 123;

-- DROP USER USER_1;
-- DROP USER MANAGER;
-- -------------------------- PROCEDURES/FUNCTIONS ----------------------------------

-- ENCRYPT PASS

CREATE OR REPLACE FUNCTION HASH_PASS
    (PASSWORD IN NVARCHAR2)
    RETURN NVARCHAR2
IS
BEGIN
    IF PASSWORD IS NULL THEN
        RETURN NULL; 
    ELSE
        RETURN DBMS_CRYPTO.HASH(UTL_I18N.STRING_TO_RAW(PASSWORD,'AL32UTF8'),DBMS_CRYPTO.HASH_SH256);    
    END IF;
EXCEPTION
    WHEN OTHERS 
    THEN DBMS_OUTPUT.PUT_LINE(SQLERRM ||' ' || SQLCODE);
END;

begin
dbms_output.put_line(HASH_PASS('12345'));
end;

 -- DROP FUNCTION HASH_PASS;

-- REGISTER
    
CREATE OR REPLACE FUNCTION REGISTER
    (
        NAME IN NVARCHAR2 ,
        SURNAME IN NVARCHAR2 ,
        FATHERNAME IN NVARCHAR2,
        EMAIL IN NVARCHAR2,
        PASSWORD IN NVARCHAR2,
        BIRTH IN DATE,
        USER_ADRESS IN NVARCHAR2,
        ROLE IN INTEGER 
    )
    RETURN INTEGER
IS
    ID INTEGER;
BEGIN
    INSERT INTO USERS(USER_NAME,USER_SURNAME,USER_FATHERNAME,USER_EMAIL,PASSWORD,DATE_OF_BIRTH,ADRESS,ROLE_ID)
    VALUES (NAME , SURNAME ,FATHERNAME,EMAIL,HASH_PASS(PASSWORD),BIRTH,USER_ADRESS,ROLE)
    RETURNING USERS.USER_ID INTO ID;
    RETURN ID;
END;
    
BEGIN
    DBMS_OUTPUT.PUT_LINE(REGISTER('VLAD','LEMESH','OLEG','VLAD.LEMESHOK@GMAIL.COM' , '12345' , '25-04-2004','mINSK' , 1));
END;


-- LOGIN

CREATE OR REPLACE FUNCTION LOGIN
    (
        EMAIL IN NVARCHAR2,
        PASS IN NVARCHAR2
    )
    RETURN INTEGER
IS
    USER USERS%ROWTYPE;
BEGIN
    SELECT * INTO USER FROM USERS  WHERE PASSWORD = HASH_PASS(PASS) AND USER_EMAIL = EMAIL;
    IF PASS IS NULL
        THEN RETURN 0;
    ELSIF USER.USER_ID IS NOT NULL
        THEN
            RETURN 1;
    ELSE 
        RETURN 0;
    END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(LOGIN('VLAD.LEMESHOK@GMAIL.COM','12345'));
END;

-- ADD BIKE  

    CREATE OR REPLACE FUNCTION ADD_BIKE 
    (
    SELLER IN INTEGER,
    NAME IN NVARCHAR2,
    PRICE IN DECIMAL,
    CATEGORY  IN INTEGER
    )
    RETURN INTEGER
    IS
    ID BIKES.BIKE_ID%TYPE;
    BEGIN
    INSERT INTO BIKES(SELLER_ID,BIKE_NAME,PRICE,CATEGORY_ID) VALUES(SELLER,NAME , PRICE , CATEGORY )
    RETURNING BIKES.BIKE_ID INTO ID;
    RETURN ID;
    EXCEPTION
        WHEN OTHERS
        THEN RETURN 0;
    END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(ADD_BIKE(1, 'BIKE 1', 1090.99, 1));
END;



-- ADD DESCRIPTION

    CREATE OR REPLACE FUNCTION ADD_DESC
    (
    BIKE IN INTEGER ,
    DESCR IN NVARCHAR2,
    TYPE IN NVARCHAR2,
    MAT IN NVARCHAR2,
    W IN FLOAT,
    H IN FLOAT
    )
    RETURN INTEGER
    IS
    ID DESCRIPTIONS.DESC_ID%TYPE;
    BEGIN
    INSERT INTO DESCRIPTIONS(BIKE_ID,BIKE_DESC,BIKE_TYPE,MATERIAL,WEIGHT,HEIGHT) VALUES(BIKE,DESCR,TYPE,MAT,W,H)
    RETURNING DESCRIPTIONS.DESC_ID INTO ID;
    RETURN ID;
    EXCEPTION
        WHEN OTHERS
        THEN RETURN 0;
    END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(ADD_DESC(2,'BRAND NEW!','OVER 14' , 'TITAN' , 120.12,59.90));
END;


-- ADD CATEGORY
    
    CREATE OR REPLACE FUNCTION ADD_CATEGORY
    (
    NAME IN VARCHAR2
    )
    RETURN NUMBER
    IS
    ID CATEGORIES.CATEGORY_ID%TYPE;
    BEGIN
    IF NAME = 'MTB' OR NAME = 'BMX' OR NAME = 'MOUNTAINT' OR NAME='KID' OR NAME = 'DEFAULT'
        THEN
            INSERT INTO CATEGORIES(CAT_NAME)VALUES(NAME)
            RETURNING CATEGORIES.CATEGORY_ID INTO ID;
            RETURN ID;
    ELSE
        DBMS_OUTPUT.PUT_LINE('ERR');
        RETURN 0;
    END IF;
    EXCEPTION
        WHEN OTHERS
        THEN RETURN 0;
    END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(ADD_CATEGORY('BMX'));
END;

SELECT * FROM CATEGORIES;

-- ADD ROLE
    
    CREATE OR REPLACE FUNCTION ADD_ROLE
    (
    NAME IN NVARCHAR2
    )
    RETURN INTEGER
    IS
    ID ROLES.ROLE_ID%TYPE;
    BEGIN
     IF NAME = 'USER' OR NAME = 'MANAGER' 
        THEN 
            INSERT INTO ROLES(ROLENAME) VALUES (NAME) 
            RETURNING ROLES.ROLE_ID INTO ID;
            RETURN ID;
     ELSE
        DBMS_OUTPUT.PUT_LINE('ERR');
        RETURN 0;
     END IF;
    EXCEPTION 
        WHEN OTHERS
        THEN RETURN 0;
    END;
    
    BEGIN
        DBMS_OUTPUT.PUT_LINE(ADD_ROLE('USER'));
    END;


-- ADD ORDER

    CREATE OR REPLACE FUNCTION ADD_ORDER 
    (
    BUYER IN INTEGER  ,
    BIKE IN INTEGER  ,
    QNT IN NUMBER  ,
    ODATE IN DATE  ,
    STAT IN NVARCHAR2  
    )
    RETURN INTEGER
    IS
        ID ORDERS.ORDER_ID%TYPE;
    BEGIN
        INSERT INTO ORDERS(BUYER_ID,BIKE_ID,QUANTITY,ORDER_DATE,STATUS) VALUES(BUYER,BIKE,QNT,ODATE,STAT)
        RETURNING ORDERS.ORDER_ID INTO ID;
        RETURN ID;
    EXCEPTION
        WHEN OTHERS 
        THEN RETURN 0;
    END;

BEGIN
    DBMS_OUTPUT.PUT_LINE(ADD_ORDER(1,2,20,'25.04.2004','IN WAY'));
END;

SELECT * FROM ORDERS;

-- UPDATE


-- ADD BIKE TO CART 

    CREATE OR REPLACE PROCEDURE ADD_TO_CART
    (
    USER INTEGER ,
    BIKE INTEGER ,
    QNT NUMBER
    )
    IS
        ID CART.CART_ID%TYPE;
    BEGIN
        INSERT INTO CART(USER_ID,BIKE_ID,QUANTITY)VALUES(USER,BIKE,QNT)
        RETURNING CART.CART_ID INTO ID;
        EXCEPTION
        WHEN OTHERS
            THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

BEGIN
    ADD_TO_CART(1,2,12);
END;


-- DEL BIKE FROM CART

    CREATE OR REPLACE PROCEDURE DEL_FROM_CART
    (
    USER IN INTEGER ,
    BIKE IN INTEGER 
    )
    IS
        ID CART.CART_ID%TYPE;
    BEGIN
        DELETE FROM CART WHERE USER_ID = USER AND BIKE_ID = BIKE
        RETURNING CART.CART_ID INTO ID;
        EXCEPTION
        WHEN OTHERS
            THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    
    BEGIN
        DEL_FROM_CART(1,1);
    END;

-- UPDATE USER

    CREATE OR REPLACE FUNCTION UPDATE_USER
    (
    UID IN INTEGER ,
    NAME IN NVARCHAR2,
    SURNAME IN NVARCHAR2,
    FATHERNAME IN NVARCHAR2,
    EMAIL IN NVARCHAR2,
    PASS IN NVARCHAR2,
    BIRTH IN DATE,
    ADR IN NVARCHAR2,
    ROLE IN INTEGER 
    )
    RETURN INTEGER
    IS
        ID USERS.USER_ID%TYPE;
    BEGIN
        UPDATE USERS 
        SET USER_NAME = NAME ,
         USER_SURNAME = SURNAME, 
         USER_FATHERNAME = FATHERNAME ,
         USER_EMAIL = EMAIL ,
         PASSWORD = HASH_PASS(PASS) ,
         DATE_OF_BIRTH = BIRTH, 
         ADRESS = ADR ,
         ROLE_ID = ROLE  WHERE USER_ID = UID
        RETURNING USERS.USER_ID INTO ID;
        RETURN ID;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

-- UPDATE PASSWORD

    CREATE OR REPLACE PROCEDURE UPDATE_PASS
    (
    USER IN INTEGER,
    PASS IN NVARCHAR2
    )
    IS
        ID USERS.USER_ID%TYPE;
    BEGIN
        UPDATE USERS SET PASSWORD = HASH_PASS(PASS) WHERE USERS.USER_ID = USER
        RETURNING USERS.USER_ID INTO ID
        ;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

-- UPDATE BIKE -- !

        CREATE OR REPLACE PROCEDURE UPDATE_PASS
    (
    USER IN INTEGER,
    PASS IN NVARCHAR2
    )
    IS
        ID USERS.USER_ID%TYPE;
    BEGIN
        UPDATE USERS SET PASSWORD = HASH_PASS(PASS) WHERE USERS.USER_ID = USER
        RETURNING USERS.USER_ID INTO ID
        ;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;


-- DELETE USER

    CREATE OR REPLACE PROCEDURE DEL_USER
    (
        USER IN INTEGER
    )
    IS
        CURSOR USER_BIKES IS SELECT BIKE_ID FROM BIKES WHERE SELLER_ID = USER;
        ID USERS.USER_ID%TYPE;
        BID BIKES%ROWTYPE;
    BEGIN
    FOR BID IN USER_BIKES
    LOOP
        DELETE FROM ORDERS WHERE BUYER_ID = USER;
        DELETE FROM CART WHERE USER_ID =  USER;
        DELETE FROM DESCRIPTIONS WHERE BIKE_ID = BID.BIKE_ID;
        DELETE FROM RATINGS WHERE USER_ID = USER;
        DELETE FROM BIKES WHERE SELLER_ID = USER
        RETURNING BIKES.BIKE_ID INTO BID;
        DELETE FROM USERS WHERE USER_ID = USER
        RETURNING USERS.USER_ID INTO ID;
    END LOOP;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

    BEGIN
        DEL_USER(1);
    END;
-- DELETE BIKE

    CREATE OR REPLACE PROCEDURE DEL_BIKE 
    (
    BIKE IN INTEGER
    )
    IS
        BID BIKES.BIKE_ID%TYPE; 
    BEGIN
        DELETE FROM ORDERS WHERE BIKE_ID = BIKE;
        DELETE FROM CART WHERE BIKE_ID = BIKE;
        DELETE FROM RATINGS WHERE BIKE_ID = BIKE;
        DELETE FROM DESCRIPTIONS WHERE BIKE_ID = BIKE;
        DELETE FROM BIKES WHERE BIKE_ID = BIKE
        RETURNING BIKES.BIKE_ID INTO BID;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    
    BEGIN
        DEL_BIKE(2);
    END;
    
-- ADD RATE

    CREATE OR REPLACE FUNCTION ADD_RATE
    (
    BIKE IN INTEGER ,
    USER IN INTEGER ,
    VALUE IN NUMBER ,
    MESSAGE IN NVARCHAR2 ,
    TIMES IN TIMESTAMP 
    )
    RETURN INTEGER
    IS
        ID RATINGS.RATING_ID%TYPE;
    BEGIN
    IF VALUE > 10 OR VALUE < 0
        THEN RETURN 0;
    ELSE
        INSERT INTO RATINGS(BIKE_ID,USER_ID,RATING_VALUE,RATING_MESSAGE,TIME_STAMP) VALUES(BIKE,USER,VALUE,MESSAGE,TIMES)
        RETURNING RATINGS.RATING_ID INTO ID;
        RETURN ID;
    END IF;
    EXCEPTION
        WHEN OTHERS
        THEN RETURN 0;
    END;

    BEGIN
        DBMS_OUTPUT.PUT_LINE(ADD_RATE(2,1,8,'NICE ONE!',SYSTIMESTAMP));
    END;
    
SELECT SYSTIMESTAMP FROM DUAL;
SELECT * FROM RATINGS;

-- CLEAR CART 

    CREATE OR REPLACE PROCEDURE CLEAR_CART
    (
      USER INTEGER 
    )
    IS
        CURSOR CART_CURS IS SELECT CART_ID ,USER_ID, BIKE_ID , QUANTITY FROM CART;
        CT CART%ROWTYPE;
    BEGIN
        FOR CT IN CART_CURS
        LOOP
            DELETE FROM CART WHERE CART.CART_ID = CT.CART_ID AND CART.USER_ID = USER AND CART.BIKE_ID =  CT.BIKE_ID AND CART.QUANTITY = CT.QUANTITY;
        END LOOP;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;

BEGIN
    CLEAR_CART(1);
END;


-- UPDATE ORDER
-- DEL ORDER

    CREATE OR REPLACE PROCEDURE DEL_ORDER 
    (
    ORD IN INTEGER
    )
    IS
        OID ORDERS.ORDER_ID%TYPE; 
    BEGIN
        DELETE FROM ORDERS WHERE ORDER_ID = ORD
        RETURNING ORDERS.ORDER_ID INTO OID;
    EXCEPTION
        WHEN OTHERS
        THEN raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
    END;
    
    BEGIN
        DEL_ORDER(1);
    END;


-- -----------------    VIES: ----------------------------

CREATE VIEW USER_V AS
SELECT 
    USER_ID ,
    USER_NAME,
    USER_SURNAME,
    USER_FATHERNAME,
    USER_EMAIL,
    DATE_OF_BIRTH,
    COUNT(ORDERS.ORDER_ID) ORDERS_COUNT
FROM USERS 
INNER JOIN ORDERS ON ORDERS.BUYER_ID = USERS.USER_ID
GROUP BY     
    USER_ID,
    USER_NAME,
    USER_SURNAME,
    USER_FATHERNAME,
    USER_EMAIL,
    DATE_OF_BIRTH
;


CREATE VIEW BIKE_V AS
SELECT
    B.BIKE_ID,
    B.BIKE_NAME,
    B.PRICE,
    C.CAT_NAME,
    D.BIKE_DESC ,
    D.BIKE_TYPE ,
    D.MATERIAL ,
    D.WEIGHT ,
    D.HEIGHT ,
    R.RATING_VALUE ,
    R.RATING_MESSAGE ,
    R.TIME_STAMP
FROM BIKES B 
INNER JOIN RATINGS R ON R.BIKE_ID = B.BIKE_ID
INNER JOIN CATEGORIES C ON C.CATEGORY_ID = B.CATEGORY_ID
INNER JOIN DESCRIPTIONS D ON D.BIKE_ID = B.BIKE_ID;



CREATE VIEW ORDER_V AS
SELECT
    O.ORDER_ID,
    O.BUYER_ID,
    B.BIKE_ID,
    B.BIKE_NAME,
    B.PRICE,
    B.SELLER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.ADRESS,
    O.QUANTITY,
    O.ORDER_DATE,
    O.STATUS
FROM ORDERS O
INNER JOIN USERS U ON U.USER_ID = O.BUYER_ID
INNER JOIN BIKES B ON B.BIKE_ID = O.BIKE_ID
;


CREATE VIEW CART_V AS
SELECT
    C.CART_ID,
    C.USER_ID,
    C.BIKE_ID,
    B.BIKE_NAME,
    B.PRICE,
    CA.CAT_NAME,
    C.QUANTITY,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME
FROM CART C
INNER JOIN USERS U ON U.USER_ID = C.USER_ID
INNER JOIN BIKES B ON B.BIKE_ID = C.BIKE_ID
INNER JOIN CATEGORIES CA ON CA.CATEGORY_ID = B.CATEGORY_ID
;


-- DROP VIEW USER_V;
-- DROP VIEW BIKE_V;
-- DROP VIEW ORDER_V;
-- DROP VIEW CART_V;


--- TRIGGERS:

-- INDEXES

-- JSON IMPORT/EXPORT:

-- 100K LINES





