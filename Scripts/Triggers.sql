-- TRIGGERS:

-- USER EMAIL
CREATE OR REPLACE TRIGGER USER_EMAIL_CHECK
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
DECLARE
    UEMAIL EXCEPTION;
BEGIN
    IF :NEW.USER_EMAIL IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.USER_EMAIL , '^[a-zA-Z0-9!#$%''\*\+-/=\?^_`\{|\}~]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}$') THEN
            RAISE UEMAIL;
        END IF;
    END IF;
EXCEPTION 
    WHEN UEMAIL THEN
    RAISE_APPLICATION_ERROR(-20001,'EMAIL IS NOT CORRECT: ' || :NEW.USER_EMAIL);
END;




-- USER BIRTH
CREATE OR REPLACE TRIGGER USER_BIRTH_DATE
BEFORE INSERT OR UPDATE ON USERS FOR EACH ROW
DECLARE
    USER_BIRTH EXCEPTION;
BEGIN
    IF :NEW.DATE_OF_BIRTH IS NOT NULL AND :NEW.DATE_OF_BIRTH > SYSDATE
    THEN RAISE USER_BIRTH;
    END IF;
EXCEPTION 
        WHEN USER_BIRTH
        THEN RAISE_APPLICATION_ERROR(-20001, 'Дата рождения не может быть в будущем.');
END;

-- USERS EMAIL

CREATE OR REPLACE TRIGGER CHECK_EMAIL
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
DECLARE
    EMAIL_EXISTS EXCEPTION;
    EMAIL_COUNT NUMBER;
BEGIN
    IF :NEW.USER_EMAIL IS NOT NULL THEN
        IF :NEW.USER_EMAIL <> :OLD.USER_EMAIL THEN
            SELECT COUNT(*) INTO EMAIL_COUNT FROM USERS WHERE USER_EMAIL = :NEW.USER_EMAIL;
            IF EMAIL_COUNT > 0 THEN
                RAISE EMAIL_EXISTS;
            END IF;
        END IF;
    END IF;
EXCEPTION
    WHEN EMAIL_EXISTS THEN
        RAISE_APPLICATION_ERROR(-20001, 'Пользователь с такой же электронной почтой уже существует.');
END;

-- DESC BIKES

CREATE OR REPLACE TRIGGER CHECK_BIKE_IN_DESC
BEFORE INSERT ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    BIKE_EXCIST EXCEPTION;
    BIKE_COUNT NUMBER;
BEGIN
IF :NEW.BIKE_ID IS NOT NULL THEN
    SELECT COUNT(*) INTO BIKE_COUNT FROM DESCRIPTIONS WHERE BIKE_ID = :NEW.BIKE_ID;
        IF BIKE_COUNT > 0 THEN
            RAISE BIKE_EXCIST;
        END IF;
END IF;
EXCEPTION
    WHEN BIKE_EXCIST 
        THEN RAISE_APPLICATION_ERROR(-20001, 'Велосипед уже имеет описание.');
END;

-- USER RATE
CREATE OR REPLACE TRIGGER CHECK_BIKE_USER_RATE
BEFORE INSERT ON RATINGS
FOR EACH ROW
DECLARE 
    USER_EXIST EXCEPTION;
    RATE_COUNT NUMBER;
BEGIN
IF :NEW.USER_ID IS NOT NULL AND :NEW.BIKE_ID IS NOT NULL THEN
    SELECT COUNT(*) INTO RATE_COUNT FROM RATINGS WHERE USER_ID = :NEW.USER_ID AND BIKE_ID = :NEW.BIKE_ID;
    IF RATE_COUNT > 0 THEN
        RAISE USER_EXIST;
    END IF;
END IF;
EXCEPTION
    WHEN USER_EXIST 
        THEN RAISE_APPLICATION_ERROR(-20001, 'Велосипед уже имеет описание.');    
END;


-- ORDER DATE

CREATE OR REPLACE TRIGGER ORDER_DATE_CHECK
BEFORE INSERT OR UPDATE ON ORDERS
FOR EACH ROW
DECLARE
    DATE_EX EXCEPTION;
BEGIN
IF :NEW.ORDER_DATE IS NOT NULL AND :NEW.ORDER_DATE > SYSDATE THEN
RAISE DATE_EX;
END IF;
EXCEPTION
    WHEN DATE_EX
        THEN RAISE_APPLICATION_ERROR(-20001, 'Дата заказа не может быть в будущем.');
END;


-- CHECK RATE TIMESTAMP
CREATE OR REPLACE TRIGGER CHECK_RATE_DATE 
BEFORE INSERT OR UPDATE ON RATINGS
FOR EACH ROW
DECLARE
    RATE_EX EXCEPTION;
BEGIN
IF :NEW.TIME_STAMP IS NOT NULL AND :NEW.TIME_STAMP > SYSTIMESTAMP THEN
    RAISE RATE_EX;
END IF;
EXCEPTION
    WHEN RATE_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Время рейтинга не может быть в будущем.');
END;


-- CHECK RATING RANGE

CREATE OR REPLACE TRIGGER CHECK_RATE_VALUE 
BEFORE INSERT OR UPDATE ON RATINGS
FOR EACH ROW
DECLARE
    RATE_EX EXCEPTION;
BEGIN
IF :NEW.RATING_VALUE IS NOT NULL THEN
    IF :NEW.RATING_VALUE > 10 OR :NEW.RATING_VALUE < 0 THEN
        RAISE RATE_EX;
    END IF;
END IF;
EXCEPTION
    WHEN RATE_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Рейтинг не может быть больше 10 и меньше 0.');
END;

-- CHECK DESCRIPTION MATERIAL

CREATE OR REPLACE TRIGGER CHECK_DESC_MATERIAL 
BEFORE INSERT OR UPDATE ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    DESC_EX EXCEPTION;
BEGIN
IF :NEW.MATERIAL IS NOT NULL THEN
    IF :NEW.MATERIAL != 'STEEL' AND :NEW.MATERIAL != 'TIN' AND :NEW.MATERIAL != 'LEAD' AND :NEW.MATERIAL != 'СТАЛЬ' AND :NEW.MATERIAL != 'ОЛОВО' AND :NEW.MATERIAL != 'СВИНЕЦ' THEN
        RAISE DESC_EX;
    END IF;
END IF;
EXCEPTION
    WHEN DESC_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Материала не существует.');
END;

-- CHECK DESCRIPTION TYPE

CREATE OR REPLACE TRIGGER CHECK_DESC_TYPE 
BEFORE INSERT OR UPDATE ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    DESC_EX EXCEPTION;
BEGIN
IF :NEW.BIKE_TYPE IS NOT NULL THEN
    IF :NEW.BIKE_TYPE != 'STREET' AND :NEW.BIKE_TYPE != 'RACING' AND :NEW.BIKE_TYPE != 'DIRT' AND :NEW.BIKE_TYPE != 'УЛИЧНЫЙ' AND :NEW.BIKE_TYPE != 'ГОНОЧНЫЙ' AND :NEW.BIKE_TYPE != 'ВНЕДОРОЖНЫЙ' THEN
        RAISE DESC_EX;
    END IF;
END IF;
EXCEPTION
    WHEN DESC_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Типа не существует.');
END;

-- CHECK DESCRIPTION HEIGHT WEIGHT

CREATE OR REPLACE TRIGGER CHECK_DESC_HEIGTH_WEIGHT
BEFORE INSERT OR UPDATE ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    DESC_EX EXCEPTION;
BEGIN
IF :NEW.HEIGHT IS NOT NULL AND :NEW.WEIGHT IS NOT NULL THEN
    IF :NEW.HEIGHT > 21 OR  :NEW.HEIGHT < 19 OR :NEW.WEIGHT > 14 OR :NEW.WEIGHT < 7 THEN
        RAISE DESC_EX;
    END IF;
END IF;
EXCEPTION
    WHEN DESC_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Масса/высота не корректна.');
END;


-- CART QNT


CREATE OR REPLACE TRIGGER CHECK_CART_QNT
BEFORE INSERT OR UPDATE ON CART
FOR EACH ROW
DECLARE
    CART_EX EXCEPTION;
BEGIN
IF :NEW.QUANTITY IS NOT NULL  THEN
    IF :NEW.QUANTITY > 100 OR :NEW.QUANTITY < 0 THEN
        RAISE CART_EX;
    END IF;
END IF;
EXCEPTION
    WHEN CART_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Нарушен ллимит колличества.');
END;

-- CATEGORY CHECK

CREATE OR REPLACE TRIGGER CHECK_CATEGORY
BEFORE INSERT OR UPDATE ON CATEGORIES
FOR EACH ROW
DECLARE
    CAT_EX EXCEPTION;
BEGIN
IF :NEW.CAT_NAME IS NOT NULL THEN
    IF :NEW.CAT_NAME != 'BMX' AND :NEW.CAT_NAME != 'MTB' AND :NEW.CAT_NAME != 'KID' AND :NEW.CAT_NAME != 'MOUNTAIN' AND :NEW.CAT_NAME != 'DEFAULT' THEN
        RAISE CAT_EX;
    END IF;
END IF;
EXCEPTION
    WHEN CAT_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Такой категории не существует.');
END;

-- ORDER SATTUS CHECK

CREATE OR REPLACE TRIGGER CHECK_ORDER_STATUS
BEFORE INSERT OR UPDATE ON ORDERS
FOR EACH ROW
DECLARE
    ORD_EX EXCEPTION;
BEGIN
IF :NEW.STATUS IS NOT NULL THEN
    IF :NEW.STATUS != 'IN WAY' AND :NEW.STATUS != 'ARRIVED' AND :NEW.STATUS != 'COMPLETED' AND :NEW.STATUS != 'AND ASSEMBLY' AND :NEW.STATUS != 'В ПУТИ'
    AND :NEW.STATUS != 'ПРИБЫЛ' AND :NEW.STATUS != 'ЗАВЕРШЁН' AND :NEW.STATUS != 'НА СБОРКЕ' THEN
        RAISE ORD_EX;
    END IF;
END IF;
EXCEPTION
    WHEN ORD_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Такого статуса не существует.');
END;


-- CHECK ROLE NAME

CREATE OR REPLACE TRIGGER CHECK_ROLE_NAME 
BEFORE INSERT OR UPDATE ON ROLES
FOR EACH ROW
DECLARE
    ROLE_EX EXCEPTION;
BEGIN
IF :NEW.ROLENAME IS NOT NULL THEN
    IF :NEW.ROLENAME != 'USER' AND :NEW.ROLENAME != 'MANAGER' THEN
        RAISE ROLE_EX;
    END IF;
END IF;
EXCEPTION
    WHEN ROLE_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Такой роли не существует.');
END;

-- CHECK CATEGORIES AGAIN

CREATE OR REPLACE TRIGGER CHECK_CAT_INSERT
BEFORE INSERT ON CATEGORIES
FOR EACH ROW
DECLARE
    CAT_COUNT NUMBER;
    CAT_EX EXCEPTION;
BEGIN
    IF :NEW.CAT_NAME IS NOT NULL THEN
        SELECT COUNT(*) INTO CAT_COUNT FROM CATEGORIES WHERE CAT_NAME = :NEW.CAT_NAME;
        IF CAT_COUNT > 0 THEN
            RAISE CAT_EX;
        END IF;
    END IF;
EXCEPTION
    WHEN CAT_EX THEN
        RAISE_APPLICATION_ERROR(-20001, 'Такая категория существует.');
END;


-- CHECK ROLE AGAIN
 
CREATE OR REPLACE TRIGGER CHECK_ROLE_INSERT
BEFORE INSERT ON ROLES
FOR EACH ROW
DECLARE
    ROLE_COUNT NUMBER;
    ROLE_EX EXCEPTION;
BEGIN
    IF :NEW.ROLENAME IS NOT NULL THEN
        SELECT COUNT(*) INTO ROLE_COUNT FROM ROLES WHERE ROLENAME = :NEW.ROLENAME;
        IF ROLE_COUNT > 0 THEN
            RAISE ROLE_EX;
        END IF;
    END IF;
EXCEPTION
    WHEN ROLE_EX THEN
        RAISE_APPLICATION_ERROR(-20001, 'Такая роль существует.');
END;


-- BIKE PRICE

CREATE OR REPLACE TRIGGER CHECK_BIKE_PRICE
BEFORE INSERT OR UPDATE ON BIKES
FOR EACH ROW
DECLARE
    BIKE_EX EXCEPTION;
BEGIN
    IF :NEW.PRICE IS NOT NULL THEN
        IF :NEW.PRICE < 0 AND :NEW.PRICE > 10000000 THEN
            RAISE BIKE_EX;
        END IF;
    END IF;
EXCEPTION
    WHEN BIKE_EX THEN
        RAISE_APPLICATION_ERROR(-20001, 'Цена неправильного формата.');
END;