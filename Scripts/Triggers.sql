-- TRIGGERS:

-- USER BIRTH
CREATE OR REPLACE TRIGGER USER_BIRTH_DATE
BEFORE INSERT OR UPDATE ON USERS FOR EACH ROW
DECLARE
    USER_BIRTH EXCEPTION;
BEGIN
    IF :NEW.DATE_OF_BIRTH IS NOT NULL AND :NEW.DATE_OF_BIRTH > SYSDATE
    THEN RAISE USER_BIRTH;
    END IF;
EXCEPTION 
        WHEN USER_BIRTH
        THEN RAISE_APPLICATION_ERROR(-20001, 'Дата рождения не может быть в будущем.');
END;

-- USERS EMAIL

CREATE OR REPLACE TRIGGER CHECK_EMAIL
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
DECLARE
    EMAIL_EXISTS EXCEPTION;
    EMAIL_COUNT NUMBER;
BEGIN
IF :NEW.USER_EMAIL IS NOT NULL THEN
    IF :NEW.USER_ID IS NULL THEN
        SELECT COUNT(*) INTO EMAIL_COUNT FROM USERS WHERE USER_EMAIL = :NEW.USER_EMAIL;
        IF EMAIL_COUNT > 0 THEN
            RAISE EMAIL_EXISTS;
        END IF;
    ELSE
        SELECT COUNT(*) INTO EMAIL_COUNT FROM USERS WHERE USER_EMAIL = :NEW.USER_EMAIL AND USER_ID != :NEW.USER_ID;
        IF EMAIL_COUNT > 0 THEN
            RAISE EMAIL_EXISTS;
        END IF;
    END IF;
END IF;
EXCEPTION
    WHEN EMAIL_EXISTS 
        THEN RAISE_APPLICATION_ERROR(-20001, 'Пользователь с такой же электронной почтой уже существует.');
END;

-- ORDER DATE

CREATE OR REPLACE TRIGGER ORDER_DATE_CHECK
BEFORE INSERT OR UPDATE ON ORDERS
FOR EACH ROW
DECLARE
    DATE_EX EXCEPTION;
BEGIN
IF :NEW.ORDER_DATE IS NOT NULL AND :NEW.ORDER_DATE > SYSDATE THEN
RAISE DATE_EX;
END IF;
EXCEPTION
    WHEN DATE_EX
        THEN RAISE_APPLICATION_ERROR(-20001, 'Дата заказа не может быть в будущем.');
END;


-- CHECK RATE TIMESTAMP
CREATE OR REPLACE TRIGGER CHECK_RATE_DATE 
BEFORE INSERT OR UPDATE ON RATINGS
FOR EACH ROW
DECLARE
    RATE_EX EXCEPTION;
BEGIN
IF :NEW.TIME_STAMP IS NOT NULL AND :NEW.TIME_STAMP > SYSTIMESTAMP THEN
    RAISE RATE_EX;
END IF;
EXCEPTION
    WHEN RATE_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Время рейтинга не может быть в будущем.');
END;


-- CHECK RATING RANGE

CREATE OR REPLACE TRIGGER CHECK_RATE_VALUE 
BEFORE INSERT OR UPDATE ON RATINGS
FOR EACH ROW
DECLARE
    RATE_EX EXCEPTION;
BEGIN
IF :NEW.RATING_VALUE IS NOT NULL THEN
    IF :NEW.RATING_VALUE > 10 OR :NEW.RATING_VALUE < 0 THEN
        RAISE RATE_EX;
    END IF;
END IF;
EXCEPTION
    WHEN RATE_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Рейтинг не может быть больше 10 и меньше 0.');
END;

-- CHECK DESCRIPTION MATERIAL

CREATE OR REPLACE TRIGGER CHECK_DESC_MATERIAL 
BEFORE INSERT OR UPDATE ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    DESC_EX EXCEPTION;
BEGIN
IF :NEW.MATERIAL IS NOT NULL THEN
    IF :NEW.MATERIAL != 'STEEL' OR :NEW.MATERIAL != 'TIN' OR :NEW.MATERIAL != 'LEAD' OR :NEW.MATERIAL != 'СТАЛЬ' OR :NEW.MATERIAL != 'ОЛОВО' OR :NEW.MATERIAL != 'СВИНЕЦ' THEN
        RAISE DESC_EX;
    END IF;
END IF;
EXCEPTION
    WHEN DESC_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Материала не существует.');
END;

-- CHECK DESCRIPTION TYPE

CREATE OR REPLACE TRIGGER CHECK_DESC_TYPE 
BEFORE INSERT OR UPDATE ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    DESC_EX EXCEPTION;
BEGIN
IF :NEW.BIKE_TYPE IS NOT NULL THEN
    IF :NEW.MATERIAL != 'STREET' OR :NEW.MATERIAL != 'RACING' OR :NEW.MATERIAL != 'DIRT' OR :NEW.MATERIAL != 'УЛИЧНЫЙ' OR :NEW.MATERIAL != 'ГОНОЧНЫЙ' OR :NEW.MATERIAL != 'ВНЕДОРОЖНЫЙ' THEN
        RAISE DESC_EX;
    END IF;
END IF;
EXCEPTION
    WHEN DESC_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Типа не существует.');
END;

-- CHECK DESCRIPTION HEIGHT

CREATE OR REPLACE TRIGGER CHECK_DESC_HEIGTH_WEIGHT
BEFORE INSERT OR UPDATE ON DESCRIPTIONS
FOR EACH ROW
DECLARE
    DESC_EX EXCEPTION;
BEGIN
IF :NEW.HEIGHT IS NOT NULL AND :NEW.WEIGHT IS NOT NULL THEN
    IF :NEW.HEIGHT > 21 OR  :NEW.HEIGHT < 19 OR :NEW.WEIGHT > 14 OR :NEW.WEIGHT < 7 THEN
        RAISE DESC_EX;
    END IF;
END IF;
EXCEPTION
    WHEN DESC_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Масса/высота не корректна.');
END;


-- CART QNT


CREATE OR REPLACE TRIGGER CHECK_CART_QNT
BEFORE INSERT OR UPDATE ON CART
FOR EACH ROW
DECLARE
    CART_EX EXCEPTION;
BEGIN
IF :NEW.QUANTITY IS NOT NULL  THEN
    IF :NEW.QUANTITY > 100 OR :NEW.QUANTITY < 0 THEN
        RAISE CART_EX;
    END IF;
END IF;
EXCEPTION
    WHEN CART_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Нарушен ллимит колличества.');
END;

-- CATEGORY CHECK

CREATE OR REPLACE TRIGGER CHECK_CATEGORY
BEFORE INSERT OR UPDATE ON CATEGORIES
FOR EACH ROW
DECLARE
    CAT_EX EXCEPTION;
BEGIN
IF :NEW.CAT_NAME IS NOT NULL THEN
    IF :NEW.CAT_NAME != 'BMX' OR :NEW.CAT_NAME != 'MTB' OR :NEW.CAT_NAME != 'KID' OR :NEW.CAT_NAME != 'PROFESSIONAL' OR :NEW.CAT_NAME != 'DEFAULT' THEN
        RAISE CAT_EX;
    END IF;
END IF;
EXCEPTION
    WHEN CAT_EX THEN
    RAISE_APPLICATION_ERROR(-20001, 'Такой категории не существует.');
END;


