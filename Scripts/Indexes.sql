

--  INDEXES FOR FULL TEXT SEARCH

-- CONTAINS

CREATE INDEX IDX_BIKE_NAME ON BIKES(BIKE_NAME) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_USER_NAME ON USERS(USER_NAME) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_USER_SURNAME ON USERS(USER_SURNAME) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_USER_FATHERNAME ON USERS(USER_FATHERNAME) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_USER_EMAIL ON USERS(USER_EMAIL) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_USER_ADRESS ON USERS(ADRESS) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_USER_BIRTH ON USERS(DATE_OF_BIRTH);
CREATE INDEX IDX_ORDER_DATE ON ORDERS(ORDER_DATE);
CREATE INDEX IDX_RATE_DATE ON RATINGS(TIME_STAMP);
CREATE INDEX IDX_ORDER_BUYER ON ORDERS(BUYER_ID);
CREATE INDEX IDX_CART_BUYER ON CART(USER_ID);
CREATE INDEX IDX_RATE_USER ON RATINGS(USER_ID);


--CATSEARCH:

CREATE INDEX IDX_DESC_TYPE ON DESCRIPTIONS(BIKE_TYPE) INDEXTYPE IS CTXSYS.CTXCAT;
CREATE INDEX IDX_DESC_MATERIAL ON DESCRIPTIONS(MATERIAL) INDEXTYPE IS CTXSYS.CTXCAT;

--MATCHES

CREATE INDEX IDX_DESC_DESC ON DESCRIPTIONS(BIKE_DESC) INDEXTYPE IS CTXSYS.CONTEXT;
CREATE INDEX IDX_RATE_MSG ON RATINGS(RATING_MESSAGE) INDEXTYPE IS CTXSYS.CTXRULE;

DROP INDEX IDX_DESC_DESC;

-- 1:

CREATE OR REPLACE FUNCTION CONTAINS_BIKE
(
NAME IN VARCHAR2
)
RETURN BIKE_TABLE_RESULT
IS
 B_RESULT BIKE_TABLE_RESULT := BIKE_TABLE_RESULT();
BEGIN
    SELECT BIKE_INFO
    (
    B.BIKE_ID,
    B.SELLER_ID,
    B.BIKE_NAME,
    B.PRICE,
    B.CATEGORY_ID,
    AVG_RATE(B.BIKE_ID),
    D.BIKE_DESC,
    D.BIKE_TYPE,
    D.MATERIAL,
    D.WEIGHT,
    D.HEIGHT
    )
    BULK COLLECT INTO B_RESULT
    FROM BIKES B
    LEFT JOIN RATINGS R ON R.BIKE_ID = B.BIKE_ID
    LEFT JOIN DESCRIPTIONS D ON D.BIKE_ID = B.BIKE_ID
    WHERE CONTAINS(BIKE_NAME,NAME,10) > 0
    ORDER BY B.BIKE_ID;
    RETURN B_RESULT;
END;

SELECT * FROM TABLE(CONTAINS_BIKE('BIKE 1'));


select * from bikes;
------

CREATE OR REPLACE FUNCTION CONTAINS_USER_BY_NAME
(
NAME IN VARCHAR2
)
RETURN USER_TABLE_RESULT
IS
    U_RESULT USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
    SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_RESULT
    FROM USERS U
    INNER JOIN ROLES R ON R.ROLE_ID =  U.ROLE_ID
    WHERE CONTAINS(USER_NAME,NAME,1)>0
    ORDER BY U.USER_ID
    ;
    RETURN U_RESULT;
END;





------

CREATE OR REPLACE FUNCTION CONTAINS_USER_BY_SURNAME
(
SURNAME IN VARCHAR2
)
RETURN USER_TABLE_RESULT
IS
    U_RESULT USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
    SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_RESULT
    FROM USERS U
    INNER JOIN ROLES R ON R.ROLE_ID =  U.ROLE_ID
    WHERE CONTAINS(USER_SURNAME,SURNAME,1)>0
    ORDER BY U.USER_ID
    ;
    RETURN U_RESULT;
END;

--------

CREATE OR REPLACE FUNCTION CONTAINS_USER_BY_FATHERNAME
(
FATHERNAME IN VARCHAR2
)
RETURN USER_TABLE_RESULT
IS
    U_RESULT USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
    SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_RESULT
    FROM USERS U
    INNER JOIN ROLES R ON R.ROLE_ID =  U.ROLE_ID
    WHERE CONTAINS(USER_FATHERNAME,FATHERNAME,1)>0
    ORDER BY U.USER_ID
    ;
    RETURN U_RESULT;
END;

------------------

CREATE OR REPLACE FUNCTION CONTAINS_USER_BY_EMAIL
(
EMAIL IN VARCHAR2
)
RETURN USER_TABLE_RESULT
IS
    U_RESULT USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
    SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_RESULT
    FROM USERS U
    INNER JOIN ROLES R ON R.ROLE_ID =  U.ROLE_ID
    WHERE CONTAINS(USER_EMAIL,EMAIL,1)>0
    ORDER BY U.USER_ID
    ;
    RETURN U_RESULT;
END;


-------------------


CREATE OR REPLACE FUNCTION CONTAINS_USER_BY_ADRESS
(
ADR IN VARCHAR2
)
RETURN USER_TABLE_RESULT
IS
    U_RESULT USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
    SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_RESULT
    FROM USERS U
    INNER JOIN ROLES R ON R.ROLE_ID =  U.ROLE_ID
    WHERE CONTAINS(ADRESS,ADR,1)>0
    ORDER BY U.USER_ID
    ;
    RETURN U_RESULT;
END;

--------------

--------- MATCHES:

CREATE OR REPLACE FUNCTION MATCH_DESC
(
TEXT VARCHAR2
)
RETURN INTEGER
IS
    DID DESCRIPTIONS.DESC_ID%TYPE;
BEGIN
    SELECT DESC_ID INTO DID FROM DESCRIPTIONS WHERE MATCHES(BIKE_DESC,TEXT) > 0;
    RETURN DID;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'NONE';
END;




CREATE OR REPLACE FUNCTION MATCHES_RATEMSG
(
TEXT VARCHAR2
)
RETURN INTEGER
IS
    RID RATINGS.RATING_ID%TYPE;
BEGIN
    SELECT RATING_ID INTO RID FROM RATINGS WHERE MATCHES(RATING_MESSAGE,TEXT) > 0;
    RETURN RID;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN 'NONE';
END;


BEGIN
    DBMS_OUTPUT.PUT_LINE(MATCHES_RATEMSG('this tex is bad!!'));
END;




----- CATSEARCH 


CREATE OR REPLACE FUNCTION CATSEARCH_TYPE
(
TYPES IN VARCHAR2
)
RETURN BIKE_TABLE_RESULT
IS
 B_RESULT BIKE_TABLE_RESULT := BIKE_TABLE_RESULT();
BEGIN
    SELECT BIKE_INFO
    (
    B.BIKE_ID,
    B.SELLER_ID,
    B.BIKE_NAME,
    B.PRICE,
    B.CATEGORY_ID,
    AVG_RATE(B.BIKE_ID),
    D.BIKE_DESC,
    D.BIKE_TYPE,
    D.MATERIAL,
    D.WEIGHT,
    D.HEIGHT
    )
    BULK COLLECT INTO B_RESULT
    FROM BIKES B
    LEFT JOIN RATINGS R ON R.BIKE_ID = B.BIKE_ID
    LEFT JOIN DESCRIPTIONS D ON D.BIKE_ID = B.BIKE_ID
    WHERE CATSEARCH(D.BIKE_TYPE,TYPES,NULL) > 0;
    RETURN B_RESULT;
END;

----


CREATE OR REPLACE FUNCTION CATSEARCH_MATERIAL
(
MAT IN VARCHAR2
)
RETURN BIKE_TABLE_RESULT
IS
 B_RESULT BIKE_TABLE_RESULT := BIKE_TABLE_RESULT();
BEGIN
    SELECT BIKE_INFO
    (
    B.BIKE_ID,
    B.SELLER_ID,
    B.BIKE_NAME,
    B.PRICE,
    B.CATEGORY_ID,
    AVG_RATE(B.BIKE_ID),
    D.BIKE_DESC,
    D.BIKE_TYPE,
    D.MATERIAL,
    D.WEIGHT,
    D.HEIGHT
    )
    BULK COLLECT INTO B_RESULT
    FROM BIKES B
    LEFT JOIN RATINGS R ON R.BIKE_ID = B.BIKE_ID
    LEFT JOIN DESCRIPTIONS D ON D.BIKE_ID = B.BIKE_ID
    WHERE CATSEARCH(D.MATERIAL,MAT,NULL) > 0;
    RETURN B_RESULT;
END;



