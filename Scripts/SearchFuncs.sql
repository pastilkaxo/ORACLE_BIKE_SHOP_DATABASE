

-- FUNCTIONS TO SEARCH DATA


CREATE OR REPLACE FUNCTION SEARCH_USER_BY_NAME 
(
NAME IN USERS.USER_NAME%TYPE
)
RETURN USER_TABLE_RESULT
IS
    U_SORTED USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_SORTED
    FROM USERS U
    LEFT JOIN ROLES R ON R.ROLE_ID = U.ROLE_ID
    WHERE U.USER_NAME LIKE NAME
    ORDER BY U.USER_NAME;
    RETURN U_SORTED;
END;

--

CREATE OR REPLACE FUNCTION SEARCH_USER_BY_SURNAME
(
SURNAME IN USERS.USER_SURNAME%TYPE
)
RETURN USER_TABLE_RESULT
IS
    U_SORTED USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_SORTED
    FROM USERS U
    LEFT JOIN ROLES R ON R.ROLE_ID = U.ROLE_ID
    WHERE U.USER_SURNAME LIKE SURNAME
    ORDER BY U.USER_SURNAME;
    RETURN U_SORTED;
END;

--

CREATE OR REPLACE FUNCTION SEARCH_USER_BY_BIRTH 
(
BIRTH IN USERS.DATE_OF_BIRTH%TYPE
)
RETURN USER_TABLE_RESULT
IS
    U_SORTED USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_SORTED
    FROM USERS U
    LEFT JOIN ROLES R ON R.ROLE_ID = U.ROLE_ID
    WHERE U.DATE_OF_BIRTH LIKE BIRTH
    ORDER BY U.DATE_OF_BIRTH;
    RETURN U_SORTED;
END;

--

CREATE OR REPLACE FUNCTION SEARCH_USER_BY_ID
(
ID IN USERS.USER_ID%TYPE
)
RETURN USER_TABLE_RESULT
IS
    U_SORTED USER_TABLE_RESULT := USER_TABLE_RESULT();
BEGIN
SELECT USER_INFO(
    U.USER_ID,
    U.USER_NAME,
    U.USER_SURNAME,
    U.USER_FATHERNAME,
    U.USER_EMAIL,
    U.PASSWORD,
    U.DATE_OF_BIRTH,
    U.ADRESS,
    R.ROLENAME
    )
    BULK COLLECT INTO U_SORTED
    FROM USERS U
    LEFT JOIN ROLES R ON R.ROLE_ID = U.ROLE_ID
    WHERE U.USER_ID LIKE ID
    ORDER BY U.USER_ID;
    RETURN U_SORTED;
END;





CREATE OR REPLACE FUNCTION SEARCH_BIKE_BY_ID
(
ID IN BIKES.BIKE_ID%TYPE
)
RETURN BIKE_TABLE_RESULT
IS
 B_RESULT BIKE_TABLE_RESULT := BIKE_TABLE_RESULT();
BEGIN
    SELECT BIKE_INFO
    (
    B.BIKE_ID,
    B.SELLER_ID,
    B.BIKE_NAME,
    B.PRICE,
    B.CATEGORY_ID,
    AVG_RATE(B.BIKE_ID),
    D.BIKE_DESC,
    D.BIKE_TYPE,
    D.MATERIAL,
    D.WEIGHT,
    D.HEIGHT
    )
    BULK COLLECT INTO B_RESULT
    FROM BIKES B
    LEFT JOIN RATINGS R ON R.BIKE_ID = B.BIKE_ID
    LEFT JOIN DESCRIPTIONS D ON D.BIKE_ID = B.BIKE_ID
    WHERE B.BIKE_ID LIKE ID
    ORDER BY B.BIKE_ID;
    RETURN B_RESULT;
END;


-- 

CREATE OR REPLACE FUNCTION SEARCH_BIKE_BY_NAME
(
NAME IN BIKES.BIKE_NAME%TYPE
)
RETURN BIKE_TABLE_RESULT
IS
 B_RESULT BIKE_TABLE_RESULT := BIKE_TABLE_RESULT();
BEGIN
    SELECT BIKE_INFO
    (
    B.BIKE_ID,
    B.SELLER_ID,
    B.BIKE_NAME,
    B.PRICE,
    B.CATEGORY_ID,
    AVG_RATE(B.BIKE_ID),
    D.BIKE_DESC,
    D.BIKE_TYPE,
    D.MATERIAL,
    D.WEIGHT,
    D.HEIGHT
    )
    BULK COLLECT INTO B_RESULT
    FROM BIKES B
    LEFT JOIN RATINGS R ON R.BIKE_ID = B.BIKE_ID
    LEFT JOIN DESCRIPTIONS D ON D.BIKE_ID = B.BIKE_ID
    WHERE B.BIKE_NAME LIKE NAME
    ORDER BY B.BIKE_NAME;
    RETURN B_RESULT;
END;


--

CREATE OR REPLACE FUNCTION SEARCH_ORDER_BY_ID
(
ID IN ORDERS.ORDER_ID%TYPE
)
RETURN ORDER_RESULT_TABLE
IS
    O_RESULT ORDER_RESULT_TABLE := ORDER_RESULT_TABLE();
BEGIN
SELECT ORDER_INFO(
O.ORDER_ID,
O.BUYER_ID,
O.BIKE_ID,
O.QUANTITY,
O.ORDER_DATE,
O.STATUS,
U.USER_NAME,
U.USER_SURNAME,
U.ADRESS
) 
BULK COLLECT INTO O_RESULT
FROM ORDERS O
LEFT JOIN  USERS U ON U.USER_ID = O.BUYER_ID
WHERE O.ORDER_ID LIKE ID
ORDER BY O.ORDER_ID;
RETURN O_RESULT;
END;



